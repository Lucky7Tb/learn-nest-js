generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model friends {
  id             Int   @id @default(autoincrement()) @db.UnsignedInt
  user_id        Int   @db.UnsignedInt
  user_friend_id Int   @db.UnsignedInt
  user_friend    users @relation("friend_user_id_friend_to_user", fields: [user_friend_id], references: [id], onDelete: Cascade, map: "FK2_FRIENDS_TO_USERS")
  user           users @relation("friend_user_id_to_user", fields: [user_id], references: [id], onDelete: Cascade, map: "FK_FRIENDS_TO_USERS")

  @@index([user_friend_id], map: "FK2_FRIENDS_TO_USERS")
  @@index([user_id], map: "FK_FRIENDS_TO_USERS")
}

model songs {
  id                  Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id             Int       @db.UnsignedInt
  song_name           String?   @db.VarChar(100)
  song_url            String?   @db.VarChar(255)
  song_is_recommended Boolean?
  created_at          DateTime? @default(now()) @db.DateTime(0)
  updated_at          DateTime? @default(now()) @db.DateTime(0)
  users               users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "FK_SONG_TO_USERS")

  @@index([user_id], map: "user_id")
}

model users {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  username      String    @unique(map: "username") @db.VarChar(80)
  password      String    @db.VarChar(255)
  photo_profile String?   @db.VarChar(80)
  unique_id     String    @unique(map: "unique_id") @db.VarChar(8)
  token         String?   @unique(map: "token") @db.VarChar(255)
  created_at    DateTime? @default(now()) @db.DateTime(0)
  updated_at    DateTime? @default(now()) @db.DateTime(0)
  user_friend   friends[] @relation("friend_user_id_friend_to_user")
  user          friends[] @relation("friend_user_id_to_user")
  songs         songs[]

  @@index([token], map: "token_2")
  @@index([unique_id], map: "unique_id_2")
  @@index([username], map: "username_2")
}
